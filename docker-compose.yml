services:
  auction-service:
    image: node
    container_name: auction-service
    working_dir: /auction
    volumes:
      - ./back-end/services/auction:/auction
    ports:
      - "6000:6000"
    command: ["sh", "-c", "npm install -g env-cmd nodemon && env-cmd -f /auction/docker.env nodemon server.js"]

  order-service:
    image: node
    container_name: order-service
    working_dir: /orders
    volumes:
      - ./back-end/services/orders:/orders
    ports:
      - "9000:9000"
    command: ["sh", "-c", "npm install -g env-cmd nodemon && env-cmd -f /orders/docker.env nodemon server.js"]

  notification-service:
    image: node
    container_name: notification-service
    working_dir: /notification
    volumes:
      - ./back-end/services/notification:/notification
    ports:
      - "8081:8081"
    command: ["sh", "-c", "npm install -g env-cmd nodemon && env-cmd -f /notification/docker.env nodemon server.js"]

  auth-service:
    image: node
    container_name: auth-service
    working_dir: /authentication
    volumes:
      - ./back-end/services/authentication:/authentication
    ports:
      - "4000:4000"
    command: ["sh", "-c", "npm install -g env-cmd nodemon && env-cmd -f /authentication/docker.env nodemon server.js"]

  auction_event_job:
    image: node
    container_name: auction_event_job
    working_dir: /jobs
    volumes:
      - ./back-end/services/jobs:/jobs
    command: ["sh", "-c", "npm install -g env-cmd nodemon && env-cmd -f /jobs/.env nodemon auction_events.js"]

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]

  postgres:
    image: postgres:15
    container_name: auction_service_database
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./back-end/databases/postgres/init-database:/docker-entrypoint-initdb.d
      - ./back-end/databases/postgres/schema:/schema

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  create-topics:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-create-topics
    depends_on:
      - kafka
    entrypoint: ["/bin/sh", "-c"]
    command: >
      echo 'Waiting for Kafka to be ready...';
      sleep 10;
      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --replication-factor 1 --partitions 4 --topic auction.start;
      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --replication-factor 1 --partitions 4 --topic auction.stop;
      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --replication-factor 1 --partitions 4 --topic order.create;
      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --replication-factor 1 --partitions 4 --topic notification.auction.event;
      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --replication-factor 1 --partitions 4 --topic notification.auction.bid;
      kafka-topics --list --bootstrap-server kafka:9092;

  api-gateway:
    image: node
    container_name: api-gateway
    working_dir: /api-gateway
    volumes:
      - ./middleware/api-gateway:/api-gateway
    ports:
      - "3000:3000"
    command: ["sh", "-c", "npm install -g env-cmd nodemon && env-cmd -f docker.env nodemon server.js"]

volumes:
  redis_data:
  postgres_data:
